/*
문제
수학, 혹은 논리학에서 만약 무엇 이라면 뭣 일 것이다 하는 식의 명제가 널리 쓰인다. 예를 들어 "P이면 Q일 것이다." 라는 명제는 “P => Q” 라는 기호로 표현된다. 이 때의 P를 전건, Q를 후건이라고 한다.
논리학에서 어떤 명제를 증명할 때 가장 널리 쓰이는 방법 중 한 가지가 바로 삼단 논법이다.
만약 두 명제 “P => Q", "Q => R" 가 모두 참이면, 명제 "P => R"이 역시 참이 된다. 이러한 방법을 사용했을 때 명제 ”P => R"이 증명되었다고 한다.
어떤 참인 명제가 주어졌을 때, 이 명제가 참이므로 이 명제 자체도 증명될 수 있다고 할 수 있다.
하지만 “P => P”와 같은 명제는 항상 참이 되는데, 이런 식으로 전건과 후건이 같은 경우는 출력하지 않기로 한다.

N개의 참인 명제들이 주어졌을 때, 증명될 수 있는 명제를 모두 구해내는 프로그램을 작성하시오.
명제를 증명하는 방법은 여러 가지가 있을 수 있지만, 위에서 언급한 방법만을 사용하기로 한다.

입력
첫째 줄에 정수 N(1≤N≤10,000)이 주어진다. 다음 N개의 줄에는 참인 명제들이 주어진다.
명제는 "P => Q"의 꼴로 주어지는데, “=>”는 앞뒤가 공백으로 구분되어 있다.
P나 Q는 명제를 나타내는 문자인데, 알파벳 대소문자 한 글자씩이 사용될 수 있다. 같은 명제가 여러 번 주어질 수도 있다.

출력
첫째 줄에 증명될 수 있는 명제의 개수 X를 출력한다.
다음 X개의 줄에 증명될 수 있는 명제를 한 줄에 하나씩 출력한다.
명제를 출력할 때에는 전건 순으로 정렬하고, 전건이 같은 경우에는 후건 순으로 정렬한다.
알파벳은 대문자가 소문자에 우선한다. 즉, 정렬했을 때 A, B, …, Z, a, b, …, z 순서로 나와야 한다.
*/







/*
solution:
알파벳을 숫자로 치환해서
floyd-warshall을 돌린다.
*/
#include <iostream>
#include <string>
using namespace std;

bool p[52][52];
int n;
int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(0);

	cin >> n;
	for (int i = 0; i < n; i++) {
		char a, b;
		string s;
		cin >> a >> s >> b;
		if (a <= 'Z') a -= 'A';
		else a = a - 'a' + 26;
		if (b <= 'Z') b -= 'A';
		else b = b - 'a' + 26;
		p[a][b] = true;
	}
	for (int i = 0; i < 52; i++) {
		p[i][i] = true;
	}
	for (int k = 0; k < 52; k++) {
		for (int i = 0; i < 52; i++) {
			for (int j = 0; j < 52; j++) {
				if (p[i][k] && p[k][j]) p[i][j] = true;
			}
		}
	}
	int ans = 0;
	for (int i = 0; i < 52; i++) {
		for (int j = 0; j < 52; j++) {
			if (p[i][j] && i != j)  ans++;
		}
	}
	cout << ans << '\n';
	for (int i = 0; i < 52; i++) {
		for (int j = 0; j < 52; j++) {
			if (p[i][j] && i != j) {
				char a = i, b = j;
				if (a < 26) a += 'A';
				else a += 'a' - 26;
				if (b < 26) b += 'A';
				else b += 'a' - 26;
				cout << a << " => " << b << '\n';
			}
		}
	}
}