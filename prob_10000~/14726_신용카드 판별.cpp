/*
문제
신용카드는 총 16자리의 숫자로 구성되어 있다.
언뜻 보기에는 무작위로 된 숫자로 구성되어 있는 것 같이 보이지만 그 속에는 하나의 수학적 비밀이 숨겨져 있다. 
중 하나가 카드 번호가 유효 한지 유효하지 않은 지 검사하는 Luhn 공식이다. 그 공식은 다음과 같다.

신용카드의 16자리 숫자에서 맨 우측 수부터 세어 홀수 번째 수는 그대로 두고, 짝수 번째 수를 2배로 만든다.
2배로 만든 짝수 번째 수가 10 이상인 경우, 각 자리의 숫자를 더하고 그 수로 대체한다.
이와 같이 얻은 모든 자리의 수를 더한다.
그 합이 10으로 나뉘면 “정당한 번호”(유효)이고 그렇지 않으면 “부당한 번호”(유효하지 않음)로 판정된다.
다음 공식을 이용해 주어진 신용카드의 번호가 유효한지, 유효하지 않은 지 판단해라.

입력
첫째 줄에 테스트 케이스의 수 T(1 ≤ T ≤ 1000)이 주어진다.

그 다음 줄부터 테스트 케이스에 해당하는 신용카드 번호가 주어진다.

출력
신용카드의 번호가 유효하면 “T”, 유효하지 않으면 “F”를 한 줄 씩 출력한다.
*/
#include <cstdio>

int t, p[16];
int main() {
	scanf("%d", &t);
	while (t--) {
		for (int i = 0; i < 16; i++) {
			scanf("%1d", p + i);
		}
		int sum = 0;
		for (int i = 0; i < 16; i++) {
			if (i % 2 == 0) {
				p[i] *= 2;
				if (p[i] > 9) {
					p[i] = p[i] % 10 + p[i] / 10;

				}
			}
			sum += p[i];
		}
		if (sum % 10 == 0)
			printf("T\n");
		else
			printf("F\n");
	}
}