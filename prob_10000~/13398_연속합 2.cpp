/*
문제
n개의 정수로 이루어진 임의의 수열이 주어진다.
우리는 이 중 연속된 몇 개의 숫자를 선택해서 구할 수 있는 합 중 가장 큰 합을 구하려고 한다.
단, 숫자는 한 개 이상 선택해야 한다. 또, 수열에서 수를 하나 제거할 수 있다. (제거하지 않아도 된다)
예를 들어서 10, -4, 3, 1, 5, 6, -35, 12, 21, -1 이라는 수열이 주어졌다고 하자.
여기서 수를 제거하지 않았을 때의 정답은 12+21인 33이 정답이 된다.
만약, -35를 제거한다면, 수열은 10, -4, 3, 1, 5, 6, 12, 21, -1이 되고, 여기서 정답은 10-4+3+1+5+6+12+21인 54가 된다.

입력
첫째 줄에 정수 n(1≤n≤100,000)이 주어지고 둘째 줄에는 n개의 정수로 이루어진 수열이 주어진다.
수는 -1,000보다 크거나 같고, 1,000보다 작거나 같은 정수이다.

출력
첫째 줄에 답을 출력한다.
*/


/*
solution:
d[n][2]: n번째를 마지막으로 하는 가장 큰 부분합, [0]일땐 아무것도 제거 x , [1]일땐 하나를 제거한 상태
d[i][0] = max(p[i], d[i-1][0] + p[i])
d[i][1] = max(d[i-1][1] +p[i], d[i-1][0])


이렇게 하면 되지 않을까.. 해서 해봤는데 진짜 됐음
사실 왜 되는지는 증명안함
신비한 dp의 세계
*/
#include <iostream>
using namespace std;

int max(int a, int b) { return (a > b) ? a : b; }
int n, d[100001][2];
int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(0);

	cin >> n;
	d[0][0] = d[0][1] = -0x3f3f3f3f;
	for (int i = 1; i < n + 1; i++) {
		int x;
		cin >> x;
		
		d[i][0] = max(x, d[i - 1][0] + x);
		d[i][1] = max(d[i - 1][1] + x, d[i - 1][0]);
	}
	int ans = d[1][0];
	for (int i = 1; i < n + 1; i++) {
		ans = max(ans, max(d[i][0], d[i][1]));
	}
	cout << ans;
}